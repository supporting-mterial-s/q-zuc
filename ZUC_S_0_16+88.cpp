#include<stdio.h>
#include<cstring>
#include<iostream>
using namespace std;

uint8_t sbox[256] = {
 0x3e, 0x72, 0x5b, 0x47, 0xca, 0xe0, 0x00, 0x33, 0x04, 0xd1, 0x54, 0x98, 0x09, 0xb9, 0x6d, 0xcb,
 0x7b, 0x1b, 0xf9, 0x32, 0xaf, 0x9d, 0x6a, 0xa5, 0xb8, 0x2d, 0xfc, 0x1d, 0x08, 0x53, 0x03, 0x90,
 0x4d, 0x4e, 0x84, 0x99, 0xe4, 0xce, 0xd9, 0x91, 0xdd, 0xb6, 0x85, 0x48, 0x8b, 0x29, 0x6e, 0xac,
 0xcd, 0xc1, 0xf8, 0x1e, 0x73, 0x43, 0x69, 0xc6, 0xb5, 0xbd, 0xfd, 0x39, 0x63, 0x20, 0xd4, 0x38,
 0x76, 0x7d, 0xb2, 0xa7, 0xcf, 0xed, 0x57, 0xc5, 0xf3, 0x2c, 0xbb, 0x14, 0x21, 0x06, 0x55, 0x9b,
 0xe3, 0xef, 0x5e, 0x31, 0x4f, 0x7f, 0x5a, 0xa4, 0x0d, 0x82, 0x51, 0x49, 0x5f, 0xba, 0x58, 0x1c,
 0x4a, 0x16, 0xd5, 0x17, 0xa8, 0x92, 0x24, 0x1f, 0x8c, 0xff, 0xd8, 0xae, 0x2e, 0x01, 0xd3, 0xad,
 0x3b, 0x4b, 0xda, 0x46, 0xeb, 0xc9, 0xde, 0x9a, 0x8f, 0x87, 0xd7, 0x3a, 0x80, 0x6f, 0x2f, 0xc8,
 0xb1, 0xb4, 0x37, 0xf7, 0x0a, 0x22, 0x13, 0x28, 0x7c, 0xcc, 0x3c, 0x89, 0xc7, 0xc3, 0x96, 0x56,
 0x07, 0xbf, 0x7e, 0xf0, 0x0b, 0x2b, 0x97, 0x52, 0x35, 0x41, 0x79, 0x61, 0xa6, 0x4c, 0x10, 0xfe,
 0xbc, 0x26, 0x95, 0x88, 0x8a, 0xb0, 0xa3, 0xfb, 0xc0, 0x18, 0x94, 0xf2, 0xe1, 0xe5, 0xe9, 0x5d,
 0xd0, 0xdc, 0x11, 0x66, 0x64, 0x5c, 0xec, 0x59, 0x42, 0x75, 0x12, 0xf5, 0x74, 0x9c, 0xaa, 0x23,
 0x0e, 0x86, 0xab, 0xbe, 0x2a, 0x02, 0xe7, 0x67, 0xe6, 0x44, 0xa2, 0x6c, 0xc2, 0x93, 0x9f, 0xf1,
 0xf6, 0xfa, 0x36, 0xd2, 0x50, 0x68, 0x9e, 0x62, 0x71, 0x15, 0x3d, 0xd6, 0x40, 0xc4, 0xe2, 0x0f,
 0x8e, 0x83, 0x77, 0x6b, 0x25, 0x05, 0x3f, 0x0c, 0x30, 0xea, 0x70, 0xb7, 0xa1, 0xe8, 0xa9, 0x65,
 0x8d, 0x27, 0x1a, 0xdb, 0x81, 0xb3, 0xa0, 0xf4, 0x45, 0x7a, 0x19, 0xdf, 0xee, 0x78, 0x34, 0x60};


/*
  This file presents the T-depth-3 implementation of the transformation 
  that maps |x>|0>^{8}|0>^{88} -> |x>|S_0(x)>|0>^{88}. 
*/
void QAND(int a, int b, int &c, int d)
{
  // two ancilla qubits with value zero
  if((c != 0) || (d != 0))
  {
    cout<<"Error!"<<endl;
    exit(0);
  }
  c = a&b;
}

void QAND_C(int a, int b, int &c)
{
  //we just simulate the QAND_C gate as the function to reset c for short;
  c = c ^ a&b;
}

int t[88] = {0};

void and_depth_1(int *x)
{
x[0] = x[0] ^ x[4];
x[1] = x[1] ^ x[7];
x[2] = x[2] ^ x[5];
x[3] = x[3] ^ x[6];

t[0] = t[0] ^ x[4];
t[1] = t[1] ^ x[5];
t[2] = t[2] ^ x[6];
t[3] = t[3] ^ x[7];

x[4] = x[4] ^ x[7] ^ 1;
x[7] = x[7] ^ t[2] ^ 1;
x[6] = x[6] ^ x[5] ^ 1;
x[5] = x[5] ^ t[0] ^ 1;

QAND(t[2], x[4], t[87],  t[5]);
QAND(t[1], x[7], t[86],  t[7]);
QAND(t[3], x[5], t[85],  t[9]);
QAND(t[0], x[6], t[84], t[11]);

x[0] = x[0] ^ t[87] ^ 1;
x[1] = x[1] ^ t[86];
x[2] = x[2] ^ t[85];
x[3] = x[3] ^ t[84] ^ 1;

x[5] = x[5] ^ t[0] ^ 1;
x[6] = x[6] ^ x[5] ^ 1;
x[7] = x[7] ^ t[2] ^ 1;
x[4] = x[4] ^ x[7] ^ 1;
t[3] = t[3] ^ x[7];
t[2] = t[2] ^ x[6];
t[1] = t[1] ^ x[5];
t[0] = t[0] ^ x[4];
/*
	outputs x_0 ~ x_3;
	t_0 ~ t_83 = 0;
	x_4 ~ x_7 have been recovered as the right half of the S_0 input.
*/
}

void and_depth_2(int *x, int *y)
{
/*
	x_0 ~ x_7 appear 6-7-3-7-5-6-6-6 times respectively;
 	before the 2nd layer of AND-depth, t_0 ~ t_83 = 0, 
 	x_0 ~ x_7 can be reused, i.e., one should copy x_0 ~ x_7 5-6-2-6-4-5-5-5 times respectively,
 	which costs 38 ancilla qubits (t_23 ~ t_60) as follows:
*/
 //copy x[0]
 t[23] = t[23] ^ x[0];
 t[24] = t[24] ^ x[0]; 
 t[25] = t[25] ^ x[0];
 t[26] = t[26] ^ x[0];
 t[27] = t[27] ^ x[0];
 
 //copy x[1]
 t[28] = t[28] ^ x[1];
 t[29] = t[29] ^ x[1]; 
 t[30] = t[30] ^ x[1];
 t[31] = t[31] ^ x[1];
 t[32] = t[32] ^ x[1];
 t[33] = t[33] ^ x[1];
 
//copy x[2]
 t[34] = t[34] ^ x[2];
 t[35] = t[35] ^ x[2];
 
//copy x[3]
 t[36] = t[36] ^ x[3];
 t[37] = t[37] ^ x[3];
 t[38] = t[38] ^ x[3];
 t[39] = t[39] ^ x[3];
 t[40] = t[40] ^ x[3];
 t[41] = t[41] ^ x[3];
 
//copy x[4]
 t[42] = t[42] ^ x[4];
 t[43] = t[43] ^ x[4];
 t[44] = t[44] ^ x[4];
 t[45] = t[45] ^ x[4];
 
//copy x[5]
 t[46] = t[46] ^ x[5];
 t[47] = t[47] ^ x[5];
 t[48] = t[48] ^ x[5];
 t[49] = t[49] ^ x[5];
 t[50] = t[50] ^ x[5];
 
 //copy x[6]
 t[51] = t[51] ^ x[6];
 t[52] = t[52] ^ x[6];
 t[53] = t[53] ^ x[6];
 t[54] = t[54] ^ x[6];
 t[55] = t[55] ^ x[6];
 
 //copy x[7]
 t[56] = t[56] ^ x[7];
 t[57] = t[57] ^ x[7];
 t[58] = t[58] ^ x[7];
 t[59] = t[59] ^ x[7];
 t[60] = t[60] ^ x[7];
 
/* 23 QAND gates */
QAND(x[6],  x[7],  t[22], t[61]);
QAND(x[5],  t[56], t[21], t[62]); 
QAND(t[46], t[51], t[20], t[63]); 
QAND(x[4],  t[57], t[19], t[64]); 
QAND(t[42], t[52], t[18], t[65]); 
QAND(t[43], t[47], t[17], t[66]);
QAND(x[3],  t[58], t[16], t[67]); 
QAND(t[36], t[53], t[15], t[68]); 
QAND(t[37], t[48], t[14], t[69]); 
QAND(t[38], t[44], t[13], t[70]); 
QAND(x[2],  t[39], t[12], t[71]);
QAND(x[1],  t[59], t[11], t[72]);
QAND(t[28], t[54], t[10], t[73]); 
QAND(t[29], t[49], t[9],  t[74]); 
QAND(t[30], t[45], t[8],  t[75]);
QAND(t[31], t[40], t[7],  t[76]);
QAND(t[32], t[34], t[6],  t[77]);
QAND(x[0],  t[60], t[5],  t[78]); 
QAND(t[23], t[55], t[4],  t[79]);
QAND(t[24], t[50], t[3],  t[80]);
QAND(t[25], t[41], t[2],  t[81]); 
QAND(t[26], t[35], t[1],  t[82]);
QAND(t[27], t[33], t[0],  t[83]);

y[0] = y[0] ^ t[21] ^ t[22];
y[1] = y[1] ^ t[18] ^ t[19];
y[2] = y[2] ^ t[18] ^ t[20];
y[3] = y[3] ^ t[16] ^ t[17] ^ t[21];

/* Since t_17 ~ t_22 will not be used later, we can reset and reuse them for saving qubits.*/
QAND_C(x[6],  x[7],  t[22]);
QAND_C(x[5],  t[56], t[21]); 
QAND_C(t[46], t[51], t[20]); 
QAND_C(x[4],  t[57], t[19]); 
QAND_C(t[42], t[52], t[18]); 
QAND_C(t[43], t[47], t[17]);

 //reset copy x[0]
 t[23] = t[23] ^ x[0];
 t[24] = t[24] ^ x[0]; 
 t[25] = t[25] ^ x[0];
 t[26] = t[26] ^ x[0];
 t[27] = t[27] ^ x[0];
 
 //reset copy x[1]
 t[28] = t[28] ^ x[1];
 t[29] = t[29] ^ x[1]; 
 t[30] = t[30] ^ x[1];
 t[31] = t[31] ^ x[1];
 t[32] = t[32] ^ x[1];
 t[33] = t[33] ^ x[1];
 
//reset copy x[2]
 t[34] = t[34] ^ x[2];
 t[35] = t[35] ^ x[2];
 
//reset copy x[3]
 t[36] = t[36] ^ x[3];
 t[37] = t[37] ^ x[3];
 t[38] = t[38] ^ x[3];
 t[39] = t[39] ^ x[3];
 t[40] = t[40] ^ x[3];
 t[41] = t[41] ^ x[3];
 
//reset copy x[4]
 t[42] = t[42] ^ x[4];
 t[43] = t[43] ^ x[4];
 t[44] = t[44] ^ x[4];
 t[45] = t[45] ^ x[4];
 
//reset copy x[5]
 t[46] = t[46] ^ x[5];
 t[47] = t[47] ^ x[5];
 t[48] = t[48] ^ x[5];
 t[49] = t[49] ^ x[5];
 t[50] = t[50] ^ x[5];
 
 //reset copy x[6]
 t[51] = t[51] ^ x[6];
 t[52] = t[52] ^ x[6];
 t[53] = t[53] ^ x[6];
 t[54] = t[54] ^ x[6];
 t[55] = t[55] ^ x[6];
 
 //reset copy x[7]
 t[56] = t[56] ^ x[7];
 t[57] = t[57] ^ x[7];
 t[58] = t[58] ^ x[7];
 t[59] = t[59] ^ x[7];
 t[60] = t[60] ^ x[7];
}

void and_depth_3(int *x, int *y)
{
/* copy the variables appear in QAND gates. */
t[67] = t[67] ^ x[0];
t[68] = t[68] ^ x[0];
t[69] = t[69] ^ x[0];
t[70] = t[70] ^ x[0];
t[71] = t[71] ^ x[0];
t[72] = t[72] ^ x[0];
t[73] = t[73] ^ x[1];
t[74] = t[74] ^ x[1];
t[75] = t[75] ^ x[1];
t[76] = t[76] ^ x[2];
t[77] = t[77] ^ x[2];
t[78] = t[78] ^ x[2];
t[79] = t[79] ^ t[0];
t[80] = t[80] ^ t[1];
t[81] = t[81] ^ t[1];
t[82] = t[82] ^ t[6];
t[83] = t[83] ^ t[6];
t[17] = t[17] ^ t[6];
t[18] = t[18] ^ t[12];
t[19] = t[19] ^ t[12];
t[20] = t[20] ^ t[13];
t[21] = t[21] ^ t[15];
t[22] = t[22] ^ t[16];

/*the in-place implementation of the operands of the QAND gates. */
x[4] = x[4] ^ t[13];
t[11]= t[11]^ t[8];
t[9] = t[9] ^ x[4];
t[4] = t[4] ^ x[4];
t[3] = t[3] ^ t[10];
t[5] = t[5] ^ t[8];
x[0] = x[0] ^ x[1];   //y[17]
t[10]= t[10]^ t[9];
t[9] = t[9] ^ t[11];
t[11]= t[11]^ t[14];  //y[15]
x[1] = x[1] ^ t[0];   //y[2]
t[0] = t[0] ^ t[6];   //y[11]
t[5] = t[5] ^ t[4];
t[4] = t[4] ^ x[5];
t[4] = t[4] ^ t[3];
t[6] = t[6] ^ t[7];   //y[18]
t[7] = t[7] ^ t[12];
t[3] = t[3] ^ t[9];
t[9] = t[9] ^ t[16];
t[8] = t[8] ^ t[15];
t[10]= t[10]^ t[8];
x[4] = x[4] ^ t[11];
t[12]= t[12]^ t[6];
t[3] = t[3] ^ t[5];    //y[1]
t[7] = t[7] ^ t[10];
t[5] = t[5] ^ x[6];
t[8] = t[8] ^ t[16];   //y[7]
t[10]= t[10]^ t[13];   //y[10]
t[16]= t[16]^ t[13];   //y[16]
t[13]= t[13]^ t[14];   //y[12]
x[5] = x[5] ^ x[7];
t[14]= t[14]^ t[15];   //y[3]
t[5] = t[5] ^ x[7];    //y[4]
x[5] = x[5] ^ t[9];    //y[13]
t[15]= t[15]^ t[16];   //y[6]
t[12]= t[12]^ t[16];   //y[14]
x[4] = x[4] ^ t[7];    //y[0]
t[9] = t[9] ^ t[7];    //y[5]
t[7] = t[7] ^ t[14];   //y[8]
t[4] = t[4] ^ t[14];   //y[9]

x[1] = x[1]  ^ 1;
t[73]= t[73] ^ 1;
t[7] = t[7]  ^ 1;
t[0] = t[0]  ^ 1;
//the 0th poly.
QAND(t[67], x[4], t[23], t[45]);
QAND(x[2],  t[3], t[24], t[46]);
QAND(t[22], x[1], t[25], t[47]);
QAND(t[82], t[14],t[26], t[48]); 

//the 1th poly.
QAND(t[76], t[5], t[27], t[49]); 
QAND(t[68], t[9], t[28], t[50]); 
QAND(t[83], t[15],t[29], t[51]); 
QAND(t[1],  t[8], t[30], t[52]); 
QAND(t[20], t[73],t[31], t[53]); 

//the 2th poly.
QAND(t[69], t[7], t[32], t[54]); 
QAND(t[77], t[4], t[33], t[55]); 
QAND(t[80], t[10],t[34], t[56]); 
QAND(t[21], t[0], t[35], t[57]);
QAND(t[74], t[13],t[36], t[58]); 

//the 3th poly.
QAND(t[78], x[5],  t[37], t[59]); 
QAND(t[70], t[12], t[38], t[60]); 
QAND(t[81], t[11], t[39], t[61]); 
QAND(t[79], t[16], t[40], t[62]); 

//the 4th poly.
QAND(t[18], x[0],  t[41], t[63]); 

//the 5th poly.
QAND(t[71], t[6],  t[42], t[64]); 

//the 6th poly.
QAND(t[72], t[17], t[43], t[65]);

//the 7th poly.
QAND(t[75], t[19], t[44], t[66]); 

x[1]  = x[1]  ^ 1;
t[73] = t[73] ^ 1;
t[7]  = t[7]  ^ 1;
t[0]  = t[0]  ^ 1;

y[0] = y[0] ^ t[23] ^ t[24] ^ t[25] ^ t[26];
y[1] = y[1] ^ t[27] ^ t[28] ^ t[29] ^ t[30] ^ t[31]; 
y[2] = y[2] ^ t[32] ^ t[33] ^ t[34] ^ t[35] ^ t[36];
y[3] = y[3] ^ t[37] ^ t[38] ^ t[39] ^ t[40];
y[4] = y[4] ^ t[41];
y[5] = y[5] ^ t[42];
y[6] = y[6] ^ t[43];
y[7] = y[7] ^ t[44];
}

void get_sbox_output(int*x, int *y)
{
/*the in-place implementation of the values XORed with the S-box outputs. */
t[3] = t[3] ^ t[9];
x[7] = x[7] ^ x[6];
t[3] = t[3] ^ t[15];
t[5] = t[5] ^ x[7];
t[1] = t[1] ^ t[2];
x[7] = x[7] ^ x[3];
t[9] = t[9] ^ t[7];
t[7] = t[7] ^ t[13];
t[7] = t[7] ^ t[16];
t[2] = t[2] ^ t[6];
t[1] = t[1] ^ t[0]; //y[15]
t[5] = t[5] ^ t[3];
x[6] = x[6] ^ x[0];
t[3] = t[3] ^ t[11];
t[8] = t[8] ^ t[2];
t[3] = t[3] ^ t[8];
t[8] = t[8] ^ t[9];
t[11]= t[11]^ t[10];
t[10]= t[10]^ t[15];
t[10]= t[10]^ t[7];
t[11]= t[11]^ x[4];
t[9] = t[9] ^ t[14];
t[7] = t[7] ^ t[9];
t[9] = t[9] ^ x[7];
t[5] = t[5] ^ t[6];
t[3] = t[3] ^ t[12];
t[3] = t[3] ^ t[7]; //y[8]
t[7] = t[7] ^ t[0]; //y[9]
t[9] = t[9] ^ x[2];
x[7] = x[7] ^ x[6]; //y[7]
t[12]= t[12]^ t[16];
t[0] = t[0] ^ t[12];
t[0] = t[0] ^ x[1];
t[2] = t[2] ^ t[10];//y[13]
t[8] = t[8] ^ t[5]; //y[11]
t[5] = t[5] ^ t[11];//y[10]
t[11]= t[11]^ t[0];
t[0] = t[0] ^ x[6];
x[6] = x[6] ^ x[2]; //y[6]
t[9] = t[9] ^ x[5]; //y[2]
t[0] = t[0] ^ t[10];//y[1]
t[12]= t[12]^ t[1]; //y[14]
x[0] = x[0] ^ t[0];
x[3] = x[3] ^ x[6]; //y[0]
t[10]= t[10]^ t[12];//y[12]
x[0] = x[0] ^ t[9]; //y[5]
x[2] = x[2] ^ t[11];//y[4]
t[11]= t[11]^ x[0]; //y[3]

///////////////////////////
y[0] = y[0] ^ x[3] ^ t[3];
y[1] = y[1] ^ t[0] ^ t[7]; 
y[2] = y[2] ^ t[9] ^ t[5];
y[3] = y[3] ^ t[11]^ t[8];
y[4] = y[4] ^ x[2] ^ t[10];
y[5] = y[5] ^ x[0] ^ t[2];
y[6] = y[6] ^ x[6] ^ t[12];
y[7] = y[7] ^ x[7] ^ t[1];
y[2] = y[2] ^ 1;
y[3] = y[3] ^ 1;
y[4] = y[4] ^ 1;
}

void reset_88(int *x)
{
t[11]= t[11]^ x[0]; //y[3]
x[2] = x[2] ^ t[11];//y[4]
x[0] = x[0] ^ t[9]; //y[5]
t[10]= t[10]^ t[12];//y[12]
x[3] = x[3] ^ x[6]; //y[0]
x[0] = x[0] ^ t[0];
t[12]= t[12]^ t[1]; //y[14]
t[0] = t[0] ^ t[10];//y[1]
t[9] = t[9] ^ x[5]; //y[2]
x[6] = x[6] ^ x[2]; //y[6]
t[0] = t[0] ^ x[6];
t[11]= t[11]^ t[0];
t[5] = t[5] ^ t[11];//y[10]
t[8] = t[8] ^ t[5]; //y[11]
t[2] = t[2] ^ t[10];//y[13]
t[0] = t[0] ^ x[1];
t[0] = t[0] ^ t[12];
t[12]= t[12]^ t[16];
x[7] = x[7] ^ x[6]; //y[7]
t[9] = t[9] ^ x[2];
t[7] = t[7] ^ t[0]; //y[9]
t[3] = t[3] ^ t[7]; //y[8]
t[3] = t[3] ^ t[12];
t[5] = t[5] ^ t[6];
t[9] = t[9] ^ x[7];
t[7] = t[7] ^ t[9];
t[9] = t[9] ^ t[14];
t[11]= t[11]^ x[4];
t[10]= t[10]^ t[7];
t[10]= t[10]^ t[15];
t[11]= t[11]^ t[10];
t[8] = t[8] ^ t[9];
t[3] = t[3] ^ t[8];
t[8] = t[8] ^ t[2];
t[3] = t[3] ^ t[11];
x[6] = x[6] ^ x[0];
t[5] = t[5] ^ t[3];
t[1] = t[1] ^ t[0]; //y[15]
t[2] = t[2] ^ t[6];
t[7] = t[7] ^ t[16];
t[7] = t[7] ^ t[13];
t[9] = t[9] ^ t[7];
x[7] = x[7] ^ x[3];
t[1] = t[1] ^ t[2];
t[5] = t[5] ^ x[7];
t[3] = t[3] ^ t[15];
x[7] = x[7] ^ x[6];
t[3] = t[3] ^ t[9];
/////////////////////////////////
t[0]  = t[0]  ^ 1;
t[7]  = t[7]  ^ 1;
t[73] = t[73] ^ 1;
x[1]  = x[1]  ^ 1;
////////////////////
QAND_C(t[75], t[19], t[44]);
//the 7th poly.

QAND_C(t[72], t[17], t[43]);
//the 6th poly.

QAND_C(t[71], t[6],  t[42]);
//the 5th poly.

QAND_C(t[18], x[0],  t[41]);
//the 4th poly.

QAND_C(t[79], t[16], t[40]);
QAND_C(t[81], t[11], t[39]);
QAND_C(t[70], t[12], t[38]);
QAND_C(t[78], x[5],  t[37]);
//the 3th poly.

QAND_C(t[74], t[13],t[36]);
QAND_C(t[21], t[0], t[35]);
QAND_C(t[80], t[10],t[34]);
QAND_C(t[77], t[4], t[33]);
QAND_C(t[69], t[7], t[32]);
//the 2th poly.

QAND_C(t[20], t[73],t[31]);
QAND_C(t[1],  t[8], t[30]);
QAND_C(t[83], t[15],t[29]);
QAND_C(t[68], t[9], t[28]);
QAND_C(t[76], t[5], t[27]);
//the 1th poly.

QAND_C(t[82], t[14],t[26]);
QAND_C(t[22], x[1], t[25]);
QAND_C(x[2],  t[3], t[24]);
QAND_C(t[67], x[4], t[23]);
//the 0th poly.
t[0] = t[0]  ^ 1;
t[7] = t[7]  ^ 1;
t[73]= t[73] ^ 1;
x[1] = x[1]  ^ 1;

t[4] = t[4] ^ t[14];   //y[9]
t[7] = t[7] ^ t[14];   //y[8]
t[9] = t[9] ^ t[7];    //y[5]
x[4] = x[4] ^ t[7];    //y[0]
t[12]= t[12]^ t[16];   //y[14]
t[15]= t[15]^ t[16];   //y[6]
x[5] = x[5] ^ t[9];    //y[13]
t[5] = t[5] ^ x[7];    //y[4]
t[14]= t[14]^ t[15];   //y[3]
x[5] = x[5] ^ x[7];
t[13]= t[13]^ t[14];   //y[12]
t[16]= t[16]^ t[13];   //y[16]
t[10]= t[10]^ t[13];   //y[10]
t[8] = t[8] ^ t[16];   //y[7]
t[5] = t[5] ^ x[6];
t[7] = t[7] ^ t[10];
t[3] = t[3] ^ t[5];    //y[1]
t[12]= t[12]^ t[6];
x[4] = x[4] ^ t[11];
t[10]= t[10]^ t[8];
t[8] = t[8] ^ t[15];
t[9] = t[9] ^ t[16];
t[3] = t[3] ^ t[9];
t[7] = t[7] ^ t[12];
t[6] = t[6] ^ t[7];   //y[18]
t[4] = t[4] ^ t[3];
t[4] = t[4] ^ x[5];
t[5] = t[5] ^ t[4];
t[0] = t[0] ^ t[6];   //y[11]
x[1] = x[1] ^ t[0];   //y[2]
t[11]= t[11]^ t[14];  //y[15]
t[9] = t[9] ^ t[11];
t[10]= t[10]^ t[9];
x[0] = x[0] ^ x[1];   //y[17]
t[5] = t[5] ^ t[8];
t[3] = t[3] ^ t[10];
t[4] = t[4] ^ x[4];
t[9] = t[9] ^ x[4];
t[11]= t[11]^ t[8];
x[4] = x[4] ^ t[13];

  t[22] = t[22] ^ t[16];
  t[21] = t[21] ^ t[15];
  t[20] = t[20] ^ t[13];
  t[19] = t[19] ^ t[12];
  t[18] = t[18] ^ t[12];
  t[17] = t[17] ^ t[6];
  t[83] = t[83] ^ t[6];
  t[82] = t[82] ^ t[6];
  t[81] = t[81] ^ t[1];
  t[80] = t[80] ^ t[1];
  t[79] = t[79] ^ t[0];
  t[78] = t[78] ^ x[2];
  t[77] = t[77] ^ x[2];
  t[76] = t[76] ^ x[2];
  t[75] = t[75] ^ x[1];
  t[74] = t[74] ^ x[1];
  t[73] = t[73] ^ x[1];
  t[72] = t[72] ^ x[0];
  t[71] = t[71] ^ x[0];
  t[70] = t[70] ^ x[0];
  t[69] = t[69] ^ x[0];
  t[68] = t[68] ^ x[0];
  t[67] = t[67] ^ x[0];
////////////////////
 //copy x[7]
 t[60] = t[60] ^ x[7];
 t[59] = t[59] ^ x[7];
 t[58] = t[58] ^ x[7];
 t[57] = t[57] ^ x[7];
 t[56] = t[56] ^ x[7];

 //copy x[6]
 t[55] = t[55] ^ x[6];
 t[54] = t[54] ^ x[6];
 t[53] = t[53] ^ x[6];
 t[52] = t[52] ^ x[6];
 t[51] = t[51] ^ x[6];

 //copy x[5]
 t[50] = t[50] ^ x[5];
 t[49] = t[49] ^ x[5];
 t[48] = t[48] ^ x[5];
 t[47] = t[47] ^ x[5];
 t[46] = t[46] ^ x[5];

 //copy x[4]
 t[45] = t[45] ^ x[4];
 t[44] = t[44] ^ x[4];
 t[43] = t[43] ^ x[4];
 t[42] = t[42] ^ x[4];

 //copy x[3]
 t[41] = t[41] ^ x[3];
 t[40] = t[40] ^ x[3];
 t[39] = t[39] ^ x[3];
 t[38] = t[38] ^ x[3];
 t[37] = t[37] ^ x[3];
 t[36] = t[36] ^ x[3];

 //copy x[2]
 t[35] = t[35] ^ x[2];
 t[34] = t[34] ^ x[2];

  //copy x[1]
 t[33] = t[33] ^ x[1];
 t[32] = t[32] ^ x[1];
 t[31] = t[31] ^ x[1];
 t[30] = t[30] ^ x[1];
 t[29] = t[29] ^ x[1];
 t[28] = t[28] ^ x[1];

  //copy x[0]
 t[27] = t[27] ^ x[0];
 t[26] = t[26] ^ x[0];
 t[25] = t[25] ^ x[0];
 t[24] = t[24] ^ x[0];
 t[23] = t[23] ^ x[0];

QAND_C(t[27], t[33], t[0]);
QAND_C(t[26], t[35], t[1]);
QAND_C(t[25], t[41], t[2]);
QAND_C(t[24], t[50], t[3]);
QAND_C(t[23], t[55], t[4]);
QAND_C(x[0],  t[60], t[5]);
QAND_C(t[32], t[34], t[6]);
QAND_C(t[31], t[40], t[7]);
QAND_C(t[30], t[45], t[8]);
QAND_C(t[29], t[49], t[9]);
QAND_C(t[28], t[54], t[10]);
QAND_C(x[1],  t[59], t[11]);
QAND_C(x[2],  t[39], t[12]);
QAND_C(t[38], t[44], t[13]);
QAND_C(t[37], t[48], t[14]);
QAND_C(t[36], t[53], t[15]);
QAND_C(x[3],  t[58], t[16]);
 
  //reset copy x[7]
 t[60] = t[60] ^ x[7];
 t[59] = t[59] ^ x[7];
 t[58] = t[58] ^ x[7];
 t[57] = t[57] ^ x[7];
 t[56] = t[56] ^ x[7];

  //reset copy x[6]
 t[55] = t[55] ^ x[6];
 t[54] = t[54] ^ x[6];
 t[53] = t[53] ^ x[6];
 t[52] = t[52] ^ x[6];
 t[51] = t[51] ^ x[6];

 //reset copy x[5]
 t[50] = t[50] ^ x[5];
 t[49] = t[49] ^ x[5];
 t[48] = t[48] ^ x[5];
 t[47] = t[47] ^ x[5];
 t[46] = t[46] ^ x[5];

 //reset copy x[4]
 t[45] = t[45] ^ x[4];
 t[44] = t[44] ^ x[4];
 t[43] = t[43] ^ x[4];
 t[42] = t[42] ^ x[4];

 //reset copy x[3]
 t[41] = t[41] ^ x[3];
 t[40] = t[40] ^ x[3];
 t[39] = t[39] ^ x[3];
 t[38] = t[38] ^ x[3];
 t[37] = t[37] ^ x[3];
 t[36] = t[36] ^ x[3];

 //reset copy x[2]
 t[35] = t[35] ^ x[2];
 t[34] = t[34] ^ x[2];

 //reset copy x[1]
 t[33] = t[33] ^ x[1];
 t[32] = t[32] ^ x[1];
 t[31] = t[31] ^ x[1];
 t[30] = t[30] ^ x[1];
 t[29] = t[29] ^ x[1];
 t[28] = t[28] ^ x[1];

 //reset copy x[0]
 t[27] = t[27] ^ x[0];
 t[26] = t[26] ^ x[0];
 t[25] = t[25] ^ x[0];
 t[24] = t[24] ^ x[0];
 t[23] = t[23] ^ x[0];

 /////////////////
t[0] = t[0] ^ x[4];
t[1] = t[1] ^ x[5];
t[2] = t[2] ^ x[6];
t[3] = t[3] ^ x[7];
x[4] = x[4] ^ x[7] ^ 1;
x[7] = x[7] ^ t[2] ^ 1;
x[6] = x[6] ^ x[5] ^ 1;
x[5] = x[5] ^ t[0] ^ 1;

x[3] = x[3] ^ t[84] ^ 1;
x[2] = x[2] ^ t[85];
x[1] = x[1] ^ t[86];
x[0] = x[0] ^ t[87] ^ 1;

QAND_C(t[0], x[6], t[84]);
QAND_C(t[3], x[5], t[85]);
QAND_C(t[1], x[7], t[86]);
QAND_C(t[2], x[4], t[87]);

x[5] = x[5] ^ t[0] ^ 1;
x[6] = x[6] ^ x[5] ^ 1;
x[7] = x[7] ^ t[2] ^ 1;
x[4] = x[4] ^ x[7] ^ 1;

t[3] = t[3] ^ x[7];
t[2] = t[2] ^ x[6];
t[1] = t[1] ^ x[5];
t[0] = t[0] ^ x[4];

x[3] = x[3] ^ x[6];
x[2] = x[2] ^ x[5];
x[1] = x[1] ^ x[7];
x[0] = x[0] ^ x[4];

}

int main()
{
	for(int in = 0; in < 256; in++)
	{
		int x[8] = {0};
		int out[8] = {0};
		for(int j = 0; j < 8; j++)
		{
			x[j] = ((in >> (7 - j)) & 1);
		}

		and_depth_1(x);
		and_depth_2(x, out);
		and_depth_3(x, out);
		get_sbox_output(x, out);//linear

		//<<< 5 bits
		int sum = out[5] * 128 + out[6] * 64 + out[7] * 32 + out[0] * 16 + out[1] * 8 + out[2] * 4 + out[3] * 2 + out[4];

		if((in != 0) && ((in % 16 == 0)))
		{
			cout<<endl;
		}

		if(sum == sbox[in])
		{
			cout<<"0 ";//match
		}
		else if(sum != sbox[in])
		{
			cout<<"1 ";
		}
		reset_88(x);
	}	
	cout<<endl;
	return 0;
}

/*
Pauli-X: 39;
QAND   : 49;
QAND_C : 49;
CNOT   : 469
T-depth: 3
ancilla qubits: 8+88
1 QAND = 3 1-qubit Clifford gates 
       + 4 T gates
       + 8 CNOT gates
1 QAND_C = 4 1-qubit Clifford gates
         + 1 CNOT gate
         + 1 Measure

Totally, 
#Measure : 49;
#1-qubit : 39 + 49*3 + 49*4 = 382;
#CNOT    : 469 + 49*8+49*1 = 910;
3T       : 49*4 = 196;
T-depth  : 3
*/